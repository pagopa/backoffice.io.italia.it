# Azure DevOps pipeline to build, check source codes, run tests, and deploy.
#
# To make Danger JS run on a pull request you need to add the following pipeline
# variable and set it with a GitHub access token (scope public_repo); otherwise
# set its value to 'skip' without marking it secret:
# - DANGER_GITHUB_API_TOKEN
#
# To enable the deployment you need to configure the following variables otherwise
# the corresponding deployment jobs will be always skipped:
# - STAGING_DO_DEPLOY = true
# - PRODUCTION_DO_DEPLOY = true
# in case of a manual run, you also need to configure the following additional
# variables based on the environment to update:
# - STAGING_ENABLE_MANUAL_DEPLOY = true
# - PRODUCTION_ENABLE_MANUAL_DEPLOY = true
#
# The following variables are also used when running the deployment jobs:
# - STAGING_AZURE_SUBSCRIPTION
# - STAGING_STORAGE_ACCOUNT_NAME
# - PRODUCTION_AZURE_SUBSCRIPTION
# - PRODUCTION_STORAGE_ACCOUNT_NAME

variables:
  NODE_VERSION: '10.14.1'
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
  BLOB_CONTAINER_NAME: '$web'

parameters:
  - name: 'STAGING_ENABLE_MANUAL_DEPLOY'
    displayName: 'Enable deploy in test environment'
    type: boolean
    default: false

  - name: 'PRODUCTION_ENABLE_MANUAL_DEPLOY'
    displayName: 'Enable deploy in production environment'
    type: boolean
    default: true

# This pipeline can be manually run or is automatically triggered whenever one 
# of the following conditions is true:
# - a push is made to any branch in the repository (not only 'master')
# - a pull request is created
# - a tag named 'latest' is pushed
# Note. In the last case, the tag can be (re-)created using the Git CLI, e.g.:
#    git push -f origin <abfb967>:refs/tags/latest
trigger:
  branches:
    include:
      - '*'
      - refs/tags/latest

# This pipeline has been implemented to be run on hosted agent pools based both
# on 'windows' and 'ubuntu' virtual machine images and using the scripts defined
# in the package.json file. Since we are usually deploying on Azure Web app on Windows
# runtime, the pipeline is currently configured to use a Windows hosted image for
#Â verifying the build and deploying, and Linux OS for all other jobs for faster 
# execution. In this specific case the deploying just need to copy static Web contents.
pool:
  vmImage: 'windows-2019'

stages:
  # A) Build and code validation (always run)
  - stage: Build
    dependsOn: []
    jobs:
      # A1) Checkout, install module and build code (use Windows OS)
      - job: make_build
        steps:
          - template: azure-templates/make-build-steps.yml
            parameters:
              make: build
            
      # # A2) Analyze source code to find errors with lint (use Linux VM)
      # - job: lint
      #   pool:
      #     vmImage: 'ubuntu-latest'
      #   steps:
      #     - template: azure-templates/make-build-steps.yml
      #       parameters:
      #         make: install_dependencies

      #     - script: |
      #         yarn lint
      #       displayName: 'Lint'

      # A3) Run Danger (skipping if not executing on a PR)
      - job: danger
        pool:
          vmImage: 'ubuntu-latest'
        condition: 
          and(
            succeeded(), 
            and(
              eq(variables['Build.Reason'], 'PullRequest'),
              ne(variables['DANGER_GITHUB_API_TOKEN'], 'skip')
            )
          )
        steps:
          - template: azure-templates/make-build-steps.yml
            parameters:
              make: install_dependencies

          - bash: |
              yarn danger ci
            env:
              DANGER_GITHUB_API_TOKEN: '$(DANGER_GITHUB_API_TOKEN)'
            displayName: 'Danger CI'

  # B) Run unit tests: no test is currently available (stage Test is missed)

  # C) Deploy to STAGE environment: if the following conditions apply (use Windows OS):
  #    - continuos deployment (automatic):
  #       - $STAGING_DO_DEPLOY == true and
  #       - there is a push on 'master' branch 
  #    - manual deployment:
  #       - $STAGING_DO_DEPLOY == true and
  #       - $STAGING_ENABLE_MANUAL_DEPLOY == true
  # The deployment consists in uploading the files that the build produces in /dist 
  # directory to the a blob container. If a container with the given name does not exist 
  # in the specified storage account, it will automatically be created. 
  - stage: Deploy_staging
    condition: 
      and(
        succeeded(),
        and (
          eq(variables['STAGING_DO_DEPLOY'], true),
          or(
            and(
              eq(variables['Build.SourceBranch'], 'refs/heads/master'),
              ne(variables['Build.Reason'], 'Manual')
            ),
            and(
              eq(variables['STAGING_ENABLE_MANUAL_DEPLOY'], true),
              eq(variables['Build.Reason'], 'Manual')
            )
          )
        )
      )
    dependsOn:
      - Build
    jobs:
      - job: deploy_to_container
        steps:
          - template: azure-templates/deploy-steps.yml
            parameters:
              deployType: 'deployToAzureBlob'
              azureSubscription: '$(STAGING_AZURE_SUBSCRIPTION)'
              storageAccountName: '$(STAGING_STORAGE_ACCOUNT_NAME)'
              containerName: '$(BLOB_CONTAINER_NAME)'


  # D) Deploy to PRODUCTION environment if the following conditions apply (use Windows OS):
  #    - continuos deployment (automatic):
  #       - $PRODUCTION_DO_DEPLOY == true and
  #       - the 'latest' tag is pushed 
  #    - manual deployment:
  #       - $PRODUCTION_DO_DEPLOY == true and
  #       - $PRODUCTION_ENABLE_MANUAL_DEPLOY == true
  # The deployment consists in uploading the files that the build produces in /dist 
  # directory to the a blob container. If a container with the given name does not exist 
  # in the specified storage account, it will automatically be created. 
  - stage: Deploy_production
    condition: 
      and(
        succeeded(),
        and (
          eq(variables['PRODUCTION_DO_DEPLOY'], true),
          or(
            and(
              eq(variables['Build.SourceBranch'], 'refs/tags/latest'),
              ne(variables['Build.Reason'], 'Manual')
            ),
            and(
              eq(variables['PRODUCTION_ENABLE_MANUAL_DEPLOY'], true),
              eq(variables['Build.Reason'], 'Manual')
            )
          )
        )
      )
    dependsOn:
      - Build
    jobs:
      - job: deploy_to_container
        steps:
          - template: azure-templates/deploy-steps.yml
            parameters:
              deployType: 'deployToAzureBlob'
              azureSubscription: '$(PRODUCTION_AZURE_SUBSCRIPTION)'
              storageAccountName: '$(PRODUCTION_STORAGE_ACCOUNT_NAME)'
              containerName: '$(BLOB_CONTAINER_NAME)'
